CREATE OR REPLACE PACKAGE logger IS
  -- Author  : PATRICK_B
  -- Created : 7/25/2008 9:47:15 AM
  -- Purpose : Logging
  -- Public type declarations
  --  type <TypeName> is <Datatype>;
  -- Public constant declarations
  --  <ConstantName> constant <Datatype> := <Value>;
  -- Public variable declarations
  --  <VariableName> <Datatype>;
  -- Public function and procedure declarations
  PROCEDURE turnlogon;
  PROCEDURE turnlogoff;
  /*
    PROCEDURE ADD(
      date_in                        IN      DATE DEFAULT SYSDATE
    , message_in                     IN      VARCHAR2
    , value_date_in                  IN      DATE DEFAULT NULL
    , value_number_in                IN      NUMBER DEFAULT NULL
    , value_varchar2_in              IN      VARCHAR2 DEFAULT NULL );
  */
  PROCEDURE add(message_in IN VARCHAR2);
  PROCEDURE add(date_in    IN DATE
               ,message_in IN VARCHAR2);
  PROCEDURE add(message_in    IN VARCHAR2
               ,value_date_in IN DATE);
  PROCEDURE add(date_in       IN DATE
               ,message_in    IN VARCHAR2
               ,value_date_in IN DATE);
  PROCEDURE add(message_in      IN VARCHAR2
               ,value_number_in IN NUMBER);
  PROCEDURE add(date_in         IN DATE
               ,message_in      IN VARCHAR2
               ,value_number_in IN NUMBER);
  PROCEDURE add(message_in        IN VARCHAR2
               ,value_varchar2_in IN VARCHAR2);
  PROCEDURE add(date_in           IN DATE
               ,message_in        IN VARCHAR2
               ,value_varchar2_in IN VARCHAR2);
  PROCEDURE add(message_in       IN VARCHAR2
               ,value_boolean_in IN BOOLEAN);
  PROCEDURE add(date_in          IN DATE
               ,message_in       IN VARCHAR2
               ,value_boolean_in IN BOOLEAN);
  PROCEDURE add(date_in           IN DATE
               ,message_in        IN VARCHAR2
               ,value_date_in     IN DATE DEFAULT NULL
               ,value_number_in   IN NUMBER DEFAULT NULL
               ,value_varchar2_in IN VARCHAR2 DEFAULT NULL);
  PROCEDURE add(message_in        IN VARCHAR2
               ,value_date_in     IN DATE DEFAULT NULL
               ,value_number_in   IN NUMBER DEFAULT NULL
               ,value_varchar2_in IN VARCHAR2 DEFAULT NULL);
  PROCEDURE show;
  /*
    PROCEDURE ADD(
      date_in                        IN      DATE DEFAULT SYSDATE
    , message_in                     IN      VARCHAR2
    , value_date_in                  IN      DATE DEFAULT NULL
    , value_number_in                IN      NUMBER DEFAULT NULL
    , value_varchar2_in              IN      VARCHAR2 DEFAULT NULL );
  --*/
END logger;
/
CREATE OR REPLACE PACKAGE BODY logger IS
  -- Private type declarations
  --  type <TypeName> is <Datatype>;
  SUBTYPE log_id_t IS logger_log.log_id%TYPE;
  SUBTYPE log_user_t IS logger_log.log_user%TYPE;
  SUBTYPE log_date_t IS logger_log.log_date%TYPE;
  SUBTYPE log_message_t IS logger_log.log_message%TYPE;
  SUBTYPE log_value_date_t IS logger_log.log_value_date%TYPE;
  SUBTYPE log_value_number_t IS logger_log.log_value_number%TYPE;
  SUBTYPE log_value_varchar2_t IS logger_log.log_value_varchar2%TYPE;

  TYPE log_id_cc IS TABLE OF log_id_t INDEX BY BINARY_INTEGER;
  TYPE log_user_cc IS TABLE OF log_user_t INDEX BY BINARY_INTEGER;
  TYPE log_date_cc IS TABLE OF log_date_t INDEX BY BINARY_INTEGER;
  TYPE log_message_cc IS TABLE OF log_message_t INDEX BY BINARY_INTEGER;
  TYPE log_value_date_cc IS TABLE OF log_value_date_t INDEX BY BINARY_INTEGER;
  TYPE log_value_number_cc IS TABLE OF log_value_number_t INDEX BY BINARY_INTEGER;
  TYPE log_value_varchar2_cc IS TABLE OF log_value_varchar2_t INDEX BY BINARY_INTEGER;
  -- Private constant declarations
  --  <ConstantName> constant <Datatype> := <Value>;
  c_maxrows CONSTANT PLS_INTEGER := 5; -- preserve memory by not making this number too big
  -- Private variable declarations
  --  <VariableName> <Datatype>;
  --  fDoLog boolean;
  fdolog PLS_INTEGER;
  FUNCTION getlogvaluefromtable RETURN PLS_INTEGER
  $if dbms_db_version.ver_le_10_2
                                           $then
    $else
  result_cache relies_on(logger_log_settings)
  $end
   IS
    l_returnvalue PLS_INTEGER;
  BEGIN
    BEGIN
      SELECT set_on
        INTO l_returnvalue
        FROM logger_log_settings;
    EXCEPTION
      WHEN no_data_found THEN
        l_returnvalue := NULL;
      WHEN too_many_rows THEN
        l_returnvalue := NULL;
    END;
    RETURN l_returnvalue;
  END getlogvaluefromtable;

  FUNCTION ifelse(boolean_in     IN BOOLEAN
                 ,value_true_in  IN VARCHAR2
                 ,value_false_in IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF boolean_in THEN
      RETURN value_true_in;
    ELSE
      RETURN value_false_in;
    END IF;
  END;

  PROCEDURE inc(value_inout IN OUT PLS_INTEGER) IS
  BEGIN
    IF value_inout IS NULL THEN
      value_inout := 0;
    END IF;
    value_inout := value_inout + 1;
  END inc;

  PROCEDURE DEC(value_inout IN OUT PLS_INTEGER) IS
  BEGIN
    value_inout := value_inout - 1;
    IF (value_inout IS NULL)
       OR (value_inout < 0) THEN
      value_inout := 0;
    END IF;
  END DEC;

  -- Function and procedure implementations
  PROCEDURE turnlogon IS
  BEGIN
    --    fDoLog := true;
    inc(fdolog);
  END turnlogon;

  PROCEDURE turnlogoff IS
  BEGIN
    --    fDoLog := false;
    DEC(fdolog);
  END turnlogoff;

  PROCEDURE initialization IS
  BEGIN
    --    TurnLogOff;
    turnlogon;
  END initialization;
  FUNCTION dolog RETURN BOOLEAN IS
  BEGIN
    --    return fDoLog;
    RETURN((fdolog > 0) OR (getlogvaluefromtable > 0));
  END dolog;

  PROCEDURE do_add(date_in           IN DATE /* DEFAULT SYSDATE*/
                  ,user_in           IN VARCHAR2
                  ,message_in        IN VARCHAR2
                  ,value_date_in     IN DATE /* DEFAULT NULL*/
                  ,value_number_in   IN NUMBER /* DEFAULT NULL*/
                  ,value_varchar2_in IN VARCHAR2 /* DEFAULT NULL*/) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
    luser logger_log.log_user%TYPE := user_in;
  BEGIN
    IF dolog THEN
      IF (luser IS NULL) THEN
        luser := USER;
      END IF;
      INSERT INTO logger_log
        (log_date
        ,log_user
        ,log_message
        ,log_value_date
        ,log_value_number
        ,log_value_varchar2)
      VALUES
        (date_in
        ,luser
        ,message_in
        ,value_date_in
        ,value_number_in
        ,value_varchar2_in);
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      dbms_output.put_line(to_char(SQLCODE));
      dbms_output.put_line(SQLERRM);
      ROLLBACK;
  END do_add;
  PROCEDURE add(message_in IN VARCHAR2) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(date_in    IN DATE
               ,message_in IN VARCHAR2) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(message_in    IN VARCHAR2
               ,value_date_in IN DATE) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => value_date_in
          ,value_number_in   => NULL
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(date_in       IN DATE
               ,message_in    IN VARCHAR2
               ,value_date_in IN DATE) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => value_date_in
          ,value_number_in   => NULL
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(message_in      IN VARCHAR2
               ,value_number_in IN NUMBER) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => value_number_in
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(date_in         IN DATE
               ,message_in      IN VARCHAR2
               ,value_number_in IN NUMBER) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => value_number_in
          ,value_varchar2_in => NULL);
  END add;
  PROCEDURE add(message_in        IN VARCHAR2
               ,value_varchar2_in IN VARCHAR2) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => value_varchar2_in);
  END add;
  PROCEDURE add(date_in           IN DATE
               ,message_in        IN VARCHAR2
               ,value_varchar2_in IN VARCHAR2) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => value_varchar2_in);
  END add;
  PROCEDURE add(message_in       IN VARCHAR2
               ,value_boolean_in IN BOOLEAN) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => ifelse(value_boolean_in
                                      ,'TRUE'
                                      ,ifelse(value_boolean_in = FALSE, 'FALSE', 'NULL')));
  END add;
  PROCEDURE add(date_in          IN DATE
               ,message_in       IN VARCHAR2
               ,value_boolean_in IN BOOLEAN) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => NULL
          ,value_number_in   => NULL
          ,value_varchar2_in => ifelse(value_boolean_in
                                      ,'TRUE'
                                      ,ifelse(value_boolean_in = FALSE, 'FALSE', 'NULL')));
  END add;
  PROCEDURE add(date_in           IN DATE
               ,message_in        IN VARCHAR2
               ,value_date_in     IN DATE DEFAULT NULL
               ,value_number_in   IN NUMBER DEFAULT NULL
               ,value_varchar2_in IN VARCHAR2 DEFAULT NULL) IS
  BEGIN
    do_add(date_in           => date_in
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => value_date_in
          ,value_number_in   => value_number_in
          ,value_varchar2_in => value_varchar2_in);
  END add;
  PROCEDURE add(message_in        IN VARCHAR2
               ,value_date_in     IN DATE DEFAULT NULL
               ,value_number_in   IN NUMBER DEFAULT NULL
               ,value_varchar2_in IN VARCHAR2 DEFAULT NULL) IS
  BEGIN
    do_add(date_in           => SYSDATE
          ,user_in           => USER
          ,message_in        => message_in
          ,value_date_in     => value_date_in
          ,value_number_in   => value_number_in
          ,value_varchar2_in => value_varchar2_in);
  END add;

  PROCEDURE show IS
    CURSOR logmessages_cur IS
      SELECT log_id
            ,log_user
            ,log_date
            ,log_message
            ,log_value_date
            ,log_value_number
            ,log_value_varchar2
        FROM logger_log
       WHERE 1 = 1;
    l_log_id             log_id_cc;
    l_log_user           log_user_cc;
    l_log_date           log_date_cc;
    l_log_message        log_message_cc;
    l_log_value_date     log_value_date_cc;
    l_log_value_number   log_value_number_cc;
    l_log_value_varchar2 log_value_varchar2_cc;
  
  BEGIN
    --    -- write the headers
    --          DBMS_OUTPUT.PUT_LINE('Log_id             : '||l_log_id(idx));
    --          DBMS_OUTPUT.PUT_LINE('Log_date           : '||l_log_date(idx));
    --          DBMS_OUTPUT.PUT_LINE('Log_message        : '||l_log_message(idx));
    --          DBMS_OUTPUT.PUT_LINE('Log_value_date     : '||l_log_value_date(idx));
    --          DBMS_OUTPUT.PUT_LINE('Log_value_number   : '||l_log_value_number(idx));
    --          DBMS_OUTPUT.PUT_LINE('Log_value_varchar2 : '||l_log_value_varchar2(idx));
    -- open the cursor
    OPEN logmessages_cur;
    LOOP
      -- clear the collections
      l_log_id.delete;
      l_log_date.delete;
      l_log_message.delete;
      l_log_value_date.delete;
      l_log_value_number.delete;
      l_log_value_varchar2.delete;
    
      -- fetch data into collections
      FETCH logmessages_cur BULK COLLECT
        INTO l_log_id
            ,l_log_user
            ,l_log_date
            ,l_log_message
            ,l_log_value_date
            ,l_log_value_number
            ,l_log_value_varchar2 LIMIT c_maxrows;
      IF l_log_id.count > 0 THEN
        FOR idx IN l_log_id.first .. l_log_id.last LOOP
          dbms_output.put_line('Log_id             : ' || l_log_id(idx));
          dbms_output.put_line('Log_user           : ' || l_log_user(idx));
          dbms_output.put_line('Log_date           : ' || l_log_date(idx));
          dbms_output.put_line('Log_message        : ' || l_log_message(idx));
          dbms_output.put_line('Log_value_date     : ' || l_log_value_date(idx));
          dbms_output.put_line('Log_value_number   : ' || l_log_value_number(idx));
          dbms_output.put_line('Log_value_varchar2 : ' || l_log_value_varchar2(idx));
        END LOOP;
      END IF;
      EXIT WHEN l_log_id.count < c_maxrows;
    END LOOP;
  END show;
BEGIN
  initialization;
END logger;
/
